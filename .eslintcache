[{"D:\\nikita\\projects\\react-todo\\src\\index.js":"1","D:\\nikita\\projects\\react-todo\\src\\App.jsx":"2","D:\\nikita\\projects\\react-todo\\src\\components\\TodoItem.jsx":"3","D:\\nikita\\projects\\react-todo\\src\\components\\TodoInput.jsx":"4","D:\\nikita\\projects\\react-todo\\src\\components\\TodoActions.jsx":"5","D:\\nikita\\projects\\react-todo\\src\\components\\TodoList.jsx":"6"},{"size":234,"mtime":1612766754456,"results":"7","hashOfConfig":"8"},{"size":985,"mtime":1612950945623,"results":"9","hashOfConfig":"8"},{"size":808,"mtime":1612951534841,"results":"10","hashOfConfig":"8"},{"size":1958,"mtime":1612951133725,"results":"11","hashOfConfig":"8"},{"size":1215,"mtime":1612952111581,"results":"12","hashOfConfig":"8"},{"size":365,"mtime":1612951040519,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1ax8enq",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"D:\\nikita\\projects\\react-todo\\src\\index.js",[],["28","29"],"D:\\nikita\\projects\\react-todo\\src\\App.jsx",[],"D:\\nikita\\projects\\react-todo\\src\\components\\TodoItem.jsx",[],"D:\\nikita\\projects\\react-todo\\src\\components\\TodoInput.jsx",["30","31"],"import React from 'react';\r\n\r\nconst TodoInput = ({ setTasks, activeCollor, setActiveCollor }) => {\r\n  const colors = ['grey', 'blue', 'green', 'orange', 'red'];\r\n\r\n  // const [activeCollor, setActiveCollor] = React.useState('grey');\r\n\r\n  const addTaskHandler = (event) => {\r\n    if (event.key === 'Enter' && event.currentTarget.value !== '') {\r\n      const newTaskText = event.currentTarget.value.replace(/\\s+/g, ' ').trim(); // remoing multiple spaces like '    a    a   ';\r\n      event.currentTarget.value = '';\r\n\r\n      setTasks((prevTasks) => {\r\n        console.log('------');\r\n        if (prevTasks.length == 0) {\r\n          return [...prevTasks, { id: 1, text: newTaskText, color: activeCollor }];\r\n        } else {\r\n          return [\r\n            ...prevTasks,\r\n            { id: prevTasks[prevTasks.length - 1].id + 1, text: newTaskText, color: activeCollor },\r\n          ];\r\n        }\r\n      });\r\n\r\n      setActiveCollor('grey');\r\n    }\r\n  };\r\n\r\n  let colorButtons;\r\n\r\n  const inputRef = React.useRef();\r\n\r\n  return (\r\n    <div className=\"todo-input\">\r\n      <input onKeyDown={addTaskHandler} ref={inputRef} type=\"text\" placeholder=\"Текст задачи...\" />\r\n      <ul>\r\n        {\r\n          (colorButtons = colors.map((color) => {\r\n            return (\r\n              <li\r\n                onClick={(event) => {\r\n                  setActiveCollor(event.currentTarget.classList[1]); // корректно ли хардкодом определять конкретное имя класса? или как можно было лучше сделать?\r\n                  inputRef.current.focus(); // корректное ли использование юзрефа для связки двух элементов?\r\n                }}\r\n                className={`todo-color ${color}  ${color === activeCollor ? 'active' : ''}`}></li>\r\n            );\r\n          }))\r\n        }\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoInput;\r\n","D:\\nikita\\projects\\react-todo\\src\\components\\TodoActions.jsx",[],"D:\\nikita\\projects\\react-todo\\src\\components\\TodoList.jsx",[],{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":15,"column":30,"nodeType":"38","messageId":"39","endLine":15,"endColumn":32},{"ruleId":"40","severity":1,"message":"41","line":38,"column":12,"nodeType":"42","messageId":"43","endLine":38,"endColumn":24},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'colorButtons' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]