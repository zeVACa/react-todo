[{"D:\\nikita\\projects\\react-todo\\src\\index.js":"1","D:\\nikita\\projects\\react-todo\\src\\App.jsx":"2","D:\\nikita\\projects\\react-todo\\src\\components\\TodoItem.jsx":"3","D:\\nikita\\projects\\react-todo\\src\\components\\TodoInput.jsx":"4","D:\\nikita\\projects\\react-todo\\src\\components\\TodoActions.jsx":"5","D:\\nikita\\projects\\react-todo\\src\\components\\TodoList.jsx":"6"},{"size":234,"mtime":1612766754456,"results":"7","hashOfConfig":"8"},{"size":1244,"mtime":1613116750680,"results":"9","hashOfConfig":"8"},{"size":1368,"mtime":1613043048090,"results":"10","hashOfConfig":"8"},{"size":2145,"mtime":1613043012020,"results":"11","hashOfConfig":"8"},{"size":1298,"mtime":1613042945835,"results":"12","hashOfConfig":"8"},{"size":470,"mtime":1612974028371,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1ax8enq",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"D:\\nikita\\projects\\react-todo\\src\\index.js",[],["28","29"],"D:\\nikita\\projects\\react-todo\\src\\App.jsx",["30"],"D:\\nikita\\projects\\react-todo\\src\\components\\TodoItem.jsx",[],"D:\\nikita\\projects\\react-todo\\src\\components\\TodoInput.jsx",["31","32"],"import React from 'react';\r\n\r\nconst TodoInput = ({ setTasks, activeCollor, setActiveCollor }) => {\r\n  const colors = ['grey', 'blue', 'green', 'orange', 'red'];\r\n\r\n  const addTaskHandler = (event) => {\r\n    if (event.key === 'Enter' && event.currentTarget.value !== '') {\r\n      const newTaskText = event.currentTarget.value.replace(/\\s+/g, ' ').trim(); // remoing multiple spaces like '    a    a   ';\r\n      event.currentTarget.value = '';\r\n\r\n      setTasks((prevTasks) => {\r\n        console.log('------');\r\n        if (prevTasks.length == 0) {\r\n          let initialTaskObject = {\r\n            id: 1,\r\n            text: newTaskText,\r\n            color: activeCollor,\r\n            isCompleted: false,\r\n          };\r\n          return [...prevTasks, initialTaskObject];\r\n        } else {\r\n          let newTaskObject = {\r\n            id: prevTasks[prevTasks.length - 1].id + 1,\r\n            text: newTaskText,\r\n            color: activeCollor,\r\n            isCompleted: false,\r\n          };\r\n\r\n          return [...prevTasks, newTaskObject];\r\n        }\r\n      });\r\n\r\n      setActiveCollor('grey');\r\n    }\r\n  };\r\n\r\n  let colorButtons;\r\n\r\n  const inputRef = React.useRef();\r\n\r\n  return (\r\n    <div className=\"todo-input\">\r\n      <input onKeyDown={addTaskHandler} ref={inputRef} type=\"text\" placeholder=\"Текст задачи...\" />\r\n      <ul>\r\n        {\r\n          (colorButtons = colors.map((color) => {\r\n            return (\r\n              <li\r\n                onClick={(event) => {\r\n                  setActiveCollor(event.currentTarget.classList[1]); // корректно ли хардкодом определять конкретное имя класса? или как можно было лучше сделать?\r\n                  inputRef.current.focus(); // корректное ли использование юзрефа для связки двух элементов?\r\n                }}\r\n                className={`todo-color ${color}  ${color === activeCollor ? 'active' : ''}`}\r\n                key={color}></li>\r\n            );\r\n          }))\r\n        }\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoInput;\r\n","D:\\nikita\\projects\\react-todo\\src\\components\\TodoActions.jsx",[],"D:\\nikita\\projects\\react-todo\\src\\components\\TodoList.jsx",[],{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":17,"column":6,"nodeType":"39","endLine":17,"endColumn":8,"suggestions":"40"},{"ruleId":"41","severity":1,"message":"42","line":13,"column":30,"nodeType":"43","messageId":"44","endLine":13,"endColumn":32},{"ruleId":"45","severity":1,"message":"46","line":46,"column":12,"nodeType":"47","messageId":"48","endLine":46,"endColumn":24},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'storage'. Either include it or remove the dependency array.","ArrayExpression",["51"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'colorButtons' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"52","fix":"53"},"Update the dependencies array to be: [storage]",{"range":"54","text":"55"},[567,569],"[storage]"]